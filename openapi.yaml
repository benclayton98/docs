openapi: 3.1.0
info:
  title: Housr Perks API
  version: "1.0.0"
  summary: Daily-expiring bearer token auth with perks browse & redemption.
  description: |
    This API issues a daily-expiring bearer token via HTTP Basic Auth and exposes endpoints
    for browsing, managing, and redeeming perks. Unless otherwise noted, all endpoints
    require `Authorization: Bearer <token>` over HTTPS.

    ## Authentication
    - Obtain a token with Basic Auth to /auth/token.
    - Token expires in 24 hours by default.
    - Optional "replicable per-day" mode can be enabled server-side (see `daily` flag).

    ## Pagination & Sorting
    - Use `page` (default 1) and `per_page` (default 25, max 100).
    - Responses include `X-Total-Count` and RFC5988 `Link` headers where applicable.
    - Sorting via `?sort=field,-otherField`.

servers:
  - url: https://api.us.housr.com
    description: Production
  - url: https://sandbox.api.us.housr.com
    description: Sandbox

tags:
  - name: Auth
  - name: Perks
  - name: Categories
  - name: Redemptions
  - name: Users
  - name: System

paths:
  /health:
    get:
      tags: [System]
      summary: Health check
      security: []
      responses:
        "200":
          description: OK
  /auth/token:
    post:
      summary: Exchange Basic credentials for a scoped bearer token
      description: Scopes are determined by your client credentials
      security:
        - basicAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                daily:
                  type: boolean
                  description: If true, server may issue a per-day token (expires after 24 hours of generation).
      responses:
        "200":
          description: Token issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token: { type: string }
                  expires_at: { type: string, format: date-time }
  /perks:
    get:
      
    post:
      x-required-scopes: ["perks:write"]
  /perks/{perkId}/redeem:
    post:
      x-required-scopes: ["redemptions:create"]

  /perks:
    get:
      x-required-scopes: ["perks:read"]
      tags: [Perks]
      summary: List perks
      description: Browse perks with filters, pagination, and sorting.
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Sort"
        - in: query
          name: q
          schema: { type: string }
          description: Free-text search across title and description
        - in: query
          name: category_id
          schema: { type: string }
        - in: query
          name: city
          schema: { type: string }
        - in: query
          name: valid_on
          schema:
            type: string
            format: date
          description: Return perks valid on this calendar date (YYYY-MM-DD, UTC)
        - in: query
          name: active
          schema: { type: boolean }
        - in: query
          name: lat
          schema: { type: number, format: double }
        - in: query
          name: lng
          schema: { type: number, format: double }
        - in: query
          name: radius
          schema: { type: number }
          description: Radius in kilometers for geo filtering when lat/lng provided
      responses:
        "200":
          description: A paginated list of perks
          headers:
            X-Total-Count:
              description: Total number of matching records
              schema: { type: integer }
            Link:
              description: Pagination links (next, prev, first, last)
              schema: { type: string }
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/Perk" }
                  meta:
                    $ref: "#/components/schemas/PaginationMeta"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /perks/{perkId}:
    get:
      x-required-scopes: ["perks:read"]
      tags: [Perks]
      summary: Get a single perk
      parameters:
        - $ref: "#/components/parameters/PerkId"
      responses:
        "200":
          description: Perk
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Perk" }
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /perks/{perkId}/locations:
    get:
      x-required-scopes: ["perks:read"]
      tags: [Perks]
      summary: Locations where the perk is available
      parameters:
        - $ref: "#/components/parameters/PerkId"
      responses:
        "200":
          description: List of locations
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Location" }
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /perks/{perkId}/redeem:
    post:
      x-required-scopes: ["redemptions:create"]
      tags: [Redemptions]
      summary: Redeem a perk for a user
      description: |
        Use `Idempotency-Key` header to safely retry the same redemption without duplicate charges.
      parameters:
        - $ref: "#/components/parameters/PerkId"
        - in: header
          name: Idempotency-Key
          required: false
          schema: { type: string }
          description: A unique key to ensure idempotent redemption.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id]
              properties:
                user_id:
                  type: string
                metadata:
                  type: object
                  additionalProperties: true
      responses:
        "201":
          description: Redemption created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Redemption" }
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          description: Conflict (already redeemed or not eligible)
          content:
            application/problem+json:
              schema: { $ref: "#/components/schemas/Problem" }
        "422":
          $ref: "#/components/responses/Unprocessable"

  /categories:
    get:
      x-required-scopes: ["perks:read"]
      tags: [Categories]
      summary: Fetch perk categories
      responses:
        "200":
          description: Categories
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Category" }
        "401":
          $ref: "#/components/responses/Unauthorized"

  /users/{userId}/perks:
    get:
      tags: [Users]
      summary: List perks for a user (available, saved, redeemed)
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string }
        - in: query
          name: type
          schema:
            type: string
            enum: [available, saved, redeemed]
            default: available
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Sort"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      oneOf:
                        - $ref: "#/components/schemas/Perk"
                        - $ref: "#/components/schemas/Redemption"
                  meta:
                    $ref: "#/components/schemas/PaginationMeta"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    Page:
      in: query
      name: page
      schema: { type: integer, minimum: 1, default: 1 }
    PerPage:
      in: query
      name: per_page
      schema: { type: integer, minimum: 1, maximum: 100, default: 25 }
    Sort:
      in: query
      name: sort
      schema: { type: string }
      description: e.g. `sort=title,-created_at`
    PerkId:
      in: path
      name: perkId
      required: true
      schema: { type: string }

  responses:
    Unauthorized:
      description: Missing or invalid authentication
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    Forbidden:
      description: Authenticated but not allowed
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    NotFound:
      description: Resource not found
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    BadRequest:
      description: Bad request
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    Unprocessable:
      description: Validation errors
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/ValidationProblem" }
    TooManyRequests:
      description: Rate limit exceeded
      headers:
        Retry-After:
          description: Seconds to wait before retrying
          schema: { type: integer }
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }

  schemas:
    Money:
      type: object
      properties:
        amount:
          type: string
          pattern: "^[0-9]+(\\.[0-9]{2})?$"
          description: Decimal in string to avoid float rounding
        currency:
          type: string
          example: USD
    Location:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        address_1: { type: string }
        address_2: { type: string }
        city: { type: string }
        region: { type: string }
        postal_code: { type: string }
        country: { type: string, example: US }
        lat: { type: number, format: double }
        lng: { type: number, format: double }
    Category:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        slug: { type: string }
        icon_url: { type: string, format: uri, nullable: true }
    Perk:
      type: object
      required: [id, title, active]
      properties:
        id: { type: string }
        title: { type: string }
        description: { type: string }
        category_id: { type: string, nullable: true }
        merchant_name: { type: string, nullable: true }
        image_url: { type: string, format: uri, nullable: true }
        value:
          allOf:
            - $ref: "#/components/schemas/Money"
          nullable: true
        discount_text: { type: string, nullable: true }
        terms: { type: string, nullable: true }
        valid_from: { type: string, format: date-time, nullable: true }
        valid_to: { type: string, format: date-time, nullable: true }
        active: { type: boolean }
        locations_count: { type: integer, minimum: 0 }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    PerkCreate:
      type: object
      required: [title, active]
      properties:
        title: { type: string }
        description: { type: string }
        category_id: { type: string }
        merchant_name: { type: string }
        image_url: { type: string, format: uri }
        value: { $ref: "#/components/schemas/Money" }
        discount_text: { type: string }
        terms: { type: string }
        valid_from: { type: string, format: date-time }
        valid_to: { type: string, format: date-time }
        active: { type: boolean }
    PerkUpdate:
      type: object
      properties:
        title: { type: string }
        description: { type: string }
        category_id: { type: string, nullable: true }
        merchant_name: { type: string, nullable: true }
        image_url: { type: string, format: uri, nullable: true }
        value:
          allOf:
            - $ref: "#/components/schemas/Money"
          nullable: true
        discount_text: { type: string, nullable: true }
        terms: { type: string, nullable: true }
        valid_from: { type: string, format: date-time, nullable: true }
        valid_to: { type: string, format: date-time, nullable: true }
        active: { type: boolean }
    Redemption:
      type: object
      properties:
        id: { type: string }
        perk_id: { type: string }
        user_id: { type: string }
        redeemed_at: { type: string, format: date-time }
        status:
          type: string
          enum: [approved, rejected, pending]
        metadata:
          type: object
          additionalProperties: true
    PaginationMeta:
      type: object
      properties:
        page: { type: integer }
        per_page: { type: integer }
        total: { type: integer }
        total_pages: { type: integer }
    Problem:
      type: object
      properties:
        type: { type: string, format: uri, nullable: true }
        title: { type: string }
        status: { type: integer }
        detail: { type: string, nullable: true }
        instance: { type: string, format: uri, nullable: true }
    ValidationProblem:
      allOf:
        - $ref: "#/components/schemas/Problem"
        - type: object
          properties:
            errors:
              type: object
              additionalProperties:
                type: array
                items: { type: string }

security:
  - bearerAuth: []
